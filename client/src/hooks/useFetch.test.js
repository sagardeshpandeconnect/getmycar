// Generated by CodiumAI

describe("useFetch", () => {});

// Returns null for data when loading is true.
it("should return null for data when loading is true", async () => {
  // Arrange
  const mockUrl = "https://api.example.com/data";
  const mockData = { id: 1, name: "John Doe" };
  const mockResponse = { json: jest.fn().mockResolvedValue(mockData) };
  const mockFetch = jest.fn().mockResolvedValue(mockResponse);

  jest.spyOn(global, "fetch").mockImplementation(mockFetch);

  // Act
  const { result, waitForNextUpdate } = renderHook(() => useFetch(mockUrl));
  expect(result.current.data).toBeNull();
  expect(result.current.loading).toBe(true);
  expect(result.current.error).toBe(false);

  await waitForNextUpdate();

  // Assert
  expect(result.current.data).toBe(mockData);
  expect(result.current.loading).toBe(false);
  expect(result.current.error).toBe(false);

  // Cleanup
  global.fetch.mockRestore();
});

// Handles API returning empty data.
it("should handle API returning empty data", () => {
  // Mock the fetch function
  global.fetch = jest.fn(() =>
    Promise.resolve({
      json: () => Promise.resolve(null),
    })
  );

  // Call the useFetch hook with a URL that returns empty data
  const { data, loading, error } = useFetch("https://api.example.com/data");

  // Assert that the data is null
  expect(data).toBe(null);

  // Assert that loading is false
  expect(loading).toBe(false);

  // Assert that error is false
  expect(error).toBe(false);
});
